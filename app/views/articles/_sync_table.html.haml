- content_for :javascript do
  :javascript
    const units = #{raw(ArticleUnits.units.to_json)};
    let articleUnitRatioTemplate$ = undefined;
- price_markup = FoodsoftConfig[:price_markup].to_f
%table.table
  %thead
    %tr
      %th= heading_helper Article, :name
      %th= heading_helper Article, :note
      %th= heading_helper Article, :manufacturer
      %th= heading_helper Article, :origin
      %th= heading_helper Article, :supplier_order_unit
      %th= heading_helper Article, :price
      %th= heading_helper Article, :tax
      %th= heading_helper Article, :deposit
      %th= heading_helper Article, :article_category
  %tbody
    - index = 0
    - articles.each do |changed_article, attrs|
      - index += 1
      - unless changed_article.new_record?
        - article = Article.find(changed_article.id)
        %tr{:style => 'color:grey'}
          %td= article.name
          %td= article.note
          %td= article.manufacturer
          %td= article.origin
          %td= article.supplier_order_unit
          %td= number_to_currency article.price
          %td= number_to_percentage article.tax
          %td= number_to_currency article.deposit
          %td= article.article_category.name if article.article_category
      %tr{:id => "article_row_#{index}"}
        = render 'shared/js_templates/unit_conversion_popover_template'
        = simple_fields_for "#{field}[#{index}]", changed_article.latest_article_version do |form|
          - content_for :javascript do
            :javascript
              articleUnitRatioTemplate$ = $($.parseHTML("#{escape_javascript(render(partial: 'shared/article_unit_ratio', locals: {article_unit_ratio: @empty_article_unit_ratio, f: form, article_unit_ratio_counter: -1}))}"));
              new ArticleForm(articleUnitRatioTemplate$, $('#article_row_#{index}'), units, #{price_markup}, $('#article_row_#{index}').closest('form'), '#{field}_#{index}', '#{field}[#{index}]');
          %td{:style => highlight_new(attrs, :name)}
            = form.text_field 'name', :size => 0
            -# TODO:
            -# - hidden_fields.each do |field|
            -#   = form.input field, as: :hidden
          %td{:style => highlight_new(attrs, :note)}= form.text_field 'note', class: 'input-small'
          %td{:style => highlight_new(attrs, :manufacturer)}= form.text_field 'manufacturer', class: 'input-small'
          %td{:style => highlight_new(attrs, :origin)}= form.text_field 'origin', class: 'input-mini'
          %td{:style => highlight_new(attrs, :supplier_order_unit)}
            .d-flex.gap-1
              = form.input :supplier_order_unit, as: :select, collection: @article_units, label: false, value: changed_article.supplier_order_unit, include_blank: t('Custom (avoid if possible!)') + ':', input_html: {class: 'input-medium'}
              = form.input :unit, input_html: {class: 'input-mini ml-1'}, label: false
              %btn.btn-link.toggle-extra-units
                %i.icon-cog
            %div.extra-unit-fields.form-horizontal
              .fold-line
                .control-group
                  %label.control-label{for: 'unit_ratios'}
                    = "Unit ratios"
                  %table#fc_base_price{:class => "controls"}
                    %tbody
                      - ratios = changed_article.article_unit_ratios
                      = render :partial => 'shared/article_unit_ratio', :as => 'article_unit_ratio', :collection => ratios, locals: {f: form}
                    %tfoot
                      %td{:colspan => 6}
                        = link_to t('.add_ratio'), '#', 'data-add-ratio' => true, class: 'btn', title: "add ratio"
              .fold-line
                = form.input :minimum_order_quantity, label: "Mininum order quantity" do
                  .input-append
                    = form.input_field :minimum_order_quantity, class: 'input-mini', title: "total minimum order quantity for this article"
                    / TODO: replace 'pck' with unit offered by supplier
                    %span.add-on
              .fold-line
                = form.input :billing_unit, as: :select, collection: [], input_html: {'data-initial-value': changed_article.billing_unit, class: 'input-medium'}, include_blank: false
              .fold-line
                = form.input :group_order_granularity, label: "Allow orders per", input_html: {class: 'input-mini', title: "steps in which ordergroups can order this article"}
                = form.input :group_order_unit, as: :select, collection: [], input_html: {'data-initial-value': changed_article.group_order_unit, class: 'input-medium'}, label: '&times;'.html_safe, include_blank: false
          %td{:style => highlight_new(attrs, :price)}
            .d-flex.gap-1
              .input-prepend
                %span.add-on= t 'number.currency.format.unit'
                = form.text_field 'price', class: 'input-mini', style: 'width: 45px'
              .input.d-flex.gap-1
                %label=t('articles.form.per')
                = form.select :price_unit, [], {include_blank: false}, {'data-initial-value': changed_article.price_unit, class: 'input-medium'}
          %td{:style => highlight_new(attrs, :tax)}
            .input-append
              = form.text_field 'tax', class: 'input-mini', style: 'width: 45px'
              %span.add-on %
          %td{:style => highlight_new(attrs, :deposit)}
            .input-prepend
              %span.add-on= t 'number.currency.format.unit'
              = form.text_field 'deposit', class: 'input-mini', style: 'width: 45px'
          %td= form.select :article_category_id, ArticleCategory.all.map {|a| [ a.name, a.id ] },
            {include_blank: true}, class: 'input-small'
      - unless changed_article.errors.empty?
        %tr.alert
          %td(colspan=11)= changed_article.errors.full_messages.join(', ')
